
management:
  server:
    port: 8081

  endpoints:
    web:
      exposure:
        include: '*'

  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
      show-details: always
    info:
      enabled: true

  health:
    livenessState: # 开启 /actuator/health/liveness
      enabled: true
    readinessState: # 开启 /actuator/health/readiness
      enabled: true

  metrics:
    enable:
      jvm: true
    use-global-registry: false
    tags:
      application: ${spring.application.name}

spring:
  application:
    name: example-spring-sharding-sphere
  jpa:
    show-sql: true
    generate-ddl: false
  shardingsphere:
    props: # 属性配置 https://shardingsphere.apache.org/document/5.2.1/cn/user-manual/common-config/props/
      sql-show: true
    datasource:
      names: ds-0-write-0,ds-0-read-0,ds-1-write-0,ds-1-read-0
      ds-0-write-0:
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${DB_MYSQL_HOST}:3306/es3_write_ds_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        max-active: 16
        password: ${DB_MYSQL_PASSWORD}
        type: com.zaxxer.hikari.HikariDataSource
        username: ${DB_MYSQL_USER}
      ds-0-read-0:
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${DB_MYSQL_HOST}:3306/es3_write_ds_0_read_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        max-active: 16
        password: ${DB_MYSQL_PASSWORD}
        type: com.zaxxer.hikari.HikariDataSource
        username: ${DB_MYSQL_USER}
      ds-1-write-0:
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${DB_MYSQL_HOST}:3306/es3_write_ds_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        max-active: 16
        password: ${DB_MYSQL_PASSWORD}
        type: com.zaxxer.hikari.HikariDataSource
        username: ${DB_MYSQL_USER}
      ds-1-read-0:
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${DB_MYSQL_HOST}:3306/es3_write_ds_1_read_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        max-active: 16
        password: ${DB_MYSQL_PASSWORD}
        type: com.zaxxer.hikari.HikariDataSource
        username: ${DB_MYSQL_USER}


    rules:
      readwrite-splitting: # 读写分离
        data-sources:
          ds-0:
            load-balancer-name: ds-0-load-balancer # 负载均衡算法名称，与下面的对应
            static-strategy: # 静态读写分离
              write-data-source-name: ds-0-write-0 # 写库数据源名称
              read-data-source-names: # 读库数据源列表，可用逗号分隔
                - ds-0-read-0
          ds-1:
            load-balancer-name: ds-1-load-balancer # 负载均衡算法名称，与下面的对应
            static-strategy:
              write-data-source-name: ds-1-write-0
              read-data-source-names:
                - ds-1-read-0
        load-balancers:
          ds-0-load-balancer:
            type: ROUND_ROBIN # 负载均衡算法 https://shardingsphere.apache.org/document/5.2.1/cn/user-manual/common-config/builtin-algorithm/load-balance/
          ds-1-load-balancer:
            type: ROUND_ROBIN # 负载均衡算法 https://shardingsphere.apache.org/document/5.2.1/cn/user-manual/common-config/builtin-algorithm/load-balance/

      sharding: # 分库分表
        binding-tables:
          - tb_order
          - tb_order_item
          - tb_statistics_order
        broadcast-tables: # 广播表
          - tb_user
        default-database-strategy:
          standard:
            sharding-algorithm-name: database-inline
            sharding-column: user_id
        key-generators:
          snowflake:
            type: SNOWFLAKE

        sharding-algorithms:
          database-inline:
            props:
              algorithm-expression: ds-$->{user_id % 2}
            type: INLINE
          tb-order-inline:
            props:
              algorithm-expression: tb_order_$->{id % 2}
            type: INLINE
          tb-order-item-inline:
            type: AppOrderIdStandardShardingAlgorithm
          tb-statistics-order-inline:
            type: AppStoreIdOrderIdStandardShardingAlgorithm
        tables:
          tb_user:
            actual-data-nodes: ds-$->{0..1}.tb_user
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
          tb_account:
            actual-data-nodes: ds-$->{0..1}.tb_account
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
          tb_address:
            actual-data-nodes: ds-$->{0..1}.tb_address
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
          tb_order:
            actual-data-nodes: ds-$->{0..1}.tb_order_$->{0..1}
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            table-strategy:
              standard:
                sharding-algorithm-name: tb-order-inline
                sharding-column: id
          tb_order_item:
            actual-data-nodes: ds-$->{0..1}.tb_order_item_$->{0..1}
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: tb-order-item-inline
          tb_statistics_order:
            actual-data-nodes: ds-$->{0..1}.tb_statistics_order_$->{0..1}
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            table-strategy:
              complex:
                sharding-columns: store_id,order_id
                sharding-algorithm-name: tb-statistics-order-inline

